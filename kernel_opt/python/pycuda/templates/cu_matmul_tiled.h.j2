/* a rectangular (non-square) tile may cause lots of problems
 * let's restrict the tile to be a square
*/
#define MIN(A,B) ((A) < (B) ? (A) : (B))

__global__ void cu_matmul_tiled(const {{ T }} *__restrict__ a, const {{T}} *__restrict__ b, {{T}} *__restrict__ c)
{
    __shared__ {{ T }} a_s[{{ TILE }}][{{ TILE }}];
    __shared__ {{ T }} b_s[{{ TILE }}][{{ TILE }}];

    auto col = blockIdx.x * blockDim.x + threadIdx.x;
    auto row = blockIdx.y * blockDim.y + threadIdx.y;

    {{ T }} value = 0;
    for(auto ko=0; ko < {{ WIDTH }}; ko += {{ TILE }})
    {
        auto k_left = MIN({{TILE}}, {{WIDTH}}-ko);
        
        if (threadIdx.x < k_left)
            a_s[threadIdx.y][threadIdx.x] = a[row * {{ WIDTH }} + (ko + threadIdx.x)];
        if (threadIdx.y < k_left)
            b_s[threadIdx.y][threadIdx.x] = b[(ko + threadIdx.y) * {{ C_COLS }} + col];

        __syncthreads();

        if (row < {{ C_ROWS }} && col < {{ C_COLS }})
        {
            for(auto z=0; z < k_left; ++z)
            {
                value += a_s[threadIdx.y][z] * b_s[z][threadIdx.x];
            }
        }
        __syncthreads();
    }
    if (row < {{ C_ROWS }} && col < {{ C_COLS }})
        c[row * {{ C_COLS }} + col] = value;
}